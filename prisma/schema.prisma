generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime?        @updatedAt @map("updated_at") @db.Timestamptz
  TeamMembership TeamMembership[]

  @@map("users")
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime  @db.Timestamptz
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, token])
  @@index([identifier, expires])
  @@map("verification_tokens")
}

model Team {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  teamMemberships TeamMembership[]

  @@map("teams")
}

model TeamMembership {
  id        String             @id @default(cuid())
  userId    String             @map("user_id")
  teamId    String             @map("team_id")
  role      TeamMembershipRole @default(OWNER)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime?          @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId, role])
  @@map("user_teams")
}

enum TeamMembershipRole {
  OWNER
}

enum Category {
  DISTORTION
  DYNAMICS
  EQ
  MODULATION
  DELAY
  REVERB
  PITCH_SYNTH
  FILTER
  WAH
  AMP_WITH_CAB
}

enum Subcategory {
  MONO
  STEREO
  LEGACY
  GUITAR
  BASS
}

enum ParamType {
  CONTINUOUS
  DISCRETE
}

model Effect {
  id          String      @id @default(cuid())
  name        String
  category    Category
  subcategory Subcategory
  description String?
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime?   @updatedAt @map("updated_at") @db.Timestamptz

  parameters EffectParameter[]

  @@unique([name, category, subcategory])
  @@index([category, subcategory])
  @@map("effects")
}

model EffectParameter {
  id        String    @id @default(cuid())
  effectId  String    @map("effect_id")
  name      String
  paramType ParamType @map("param_type")

  // Continuous-only fields
  minValue     Float? @map("min_value")
  maxValue     Float? @map("max_value")
  stepValue    Float? @map("step_value")
  defaultValue Float? @map("default_value")

  // Discrete-only fields
  options       String[]
  defaultOption String?  @map("default_option")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  effect Effect @relation(fields: [effectId], references: [id], onDelete: Cascade)

  @@unique([effectId, name])
  @@map("effect_parameters")
}
